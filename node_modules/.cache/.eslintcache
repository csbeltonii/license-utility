[{"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\index.tsx":"1","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\reportWebVitals.ts":"2","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\App.tsx":"3","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\SearchResults.tsx":"4","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\HomePage.tsx":"5","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Dealer.tsx":"6","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\data\\companies.ts":"7","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Styles\\Styles.ts":"8","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Page.tsx":"9","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\DealerList.tsx":"10","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\PageTitle.tsx":"11"},{"size":565,"mtime":1628701055039,"results":"12","hashOfConfig":"13"},{"size":440,"mtime":1628701055039,"results":"14","hashOfConfig":"13"},{"size":591,"mtime":1629137109601,"results":"15","hashOfConfig":"13"},{"size":1243,"mtime":1628716902787,"results":"16","hashOfConfig":"13"},{"size":1708,"mtime":1629139590281,"results":"17","hashOfConfig":"13"},{"size":4894,"mtime":1629138335429,"results":"18","hashOfConfig":"13"},{"size":4953,"mtime":1628716786499,"results":"19","hashOfConfig":"13"},{"size":1402,"mtime":1628702883234,"results":"20","hashOfConfig":"13"},{"size":537,"mtime":1628730098010,"results":"21","hashOfConfig":"13"},{"size":1266,"mtime":1628730397669,"results":"22","hashOfConfig":"13"},{"size":330,"mtime":1628729764948,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1xrpibx",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\index.tsx",[],["50","51"],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\reportWebVitals.ts",[],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\App.tsx",["52"],"import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport HomePage from \"./components/HomePage\";\r\nimport Dealer from \"./components/Dealer\";\r\nimport SearchResults from \"./components/SearchResults\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/\" element={<HomePage />} />\r\n        <Route path=\"/dealer/:accountNumber\" element={<Dealer />} />\r\n        <Route path=\"/search\" element={<SearchResults />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\SearchResults.tsx",[],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\HomePage.tsx",[],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Dealer.tsx",[],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\data\\companies.ts",["53"],"import { NumericLiteral } from \"typescript\";\r\n\r\nconst webApiUrl = \"https://localhost:44375/api\";\r\n\r\nexport interface Company {\r\n  companyId: number;\r\n  companyName: string;\r\n  accountNumber: number;\r\n  licenses: number;\r\n  licensesMobileCount: number;\r\n  trialLicenses: number;\r\n}\r\n\r\nexport interface LicenseChange {\r\n  companyId: number;\r\n  licenseBefore: number;\r\n  licenseAfter: number;\r\n  changeDate: Date;\r\n  changeType: string;\r\n}\r\n\r\ninterface CompanyFromServer {\r\n  accountNumber: number;\r\n  accountSid: string;\r\n  agentYear: string;\r\n  altContact: string;\r\n  billAddress1: string;\r\n  billAddress2: string;\r\n  billCity: string;\r\n  billState: string;\r\n  billZip: string;\r\n  companyId: number;\r\n  companyName: string;\r\n  companyType: string;\r\n  contact: string;\r\n  databaseVersion: string;\r\n  dealer: string;\r\n  dealerId: string;\r\n  dealerPass: string;\r\n  ein: string;\r\n  emailPort: number;\r\n  emailServer: string;\r\n  emailSsl: boolean;\r\n  endDate: Date;\r\n  fmfy: number;\r\n  fmity: number;\r\n  folderName: string;\r\n  invoiceUnit: boolean;\r\n  isActive: boolean;\r\n  legalName: string;\r\n  licenseKey: string;\r\n  licenseType: string;\r\n  licenses: number;\r\n  licensesMobileCount: number;\r\n  licensesUsed: number;\r\n  logoName: string;\r\n  parentId: number;\r\n  phone1: string;\r\n  phone2: string;\r\n  phone3: string;\r\n  phone4: string;\r\n  productVersion: string;\r\n  qbName: string;\r\n  qbOnline: boolean;\r\n  salesRep: string;\r\n  serverId: number;\r\n  shipAddress1: string;\r\n  shipAddress2: string;\r\n  shipCity: string;\r\n  shipState: string;\r\n  shipZip: string;\r\n  startDate: Date;\r\n  supportType: string;\r\n  terminalYN: boolean;\r\n  trialLicenses: number;\r\n  updateServerId: number;\r\n  versionSpec: string;\r\n  webServerId: number;\r\n  webServerIdNew: number;\r\n}\r\n\r\nconst mapCompanyFromServer = (data: CompanyFromServer): Company => ({\r\n  companyId: data.companyId,\r\n  companyName: data.companyName,\r\n  accountNumber: data.accountNumber,\r\n  licenses: data.licenses,\r\n  licensesMobileCount: data.licensesMobileCount,\r\n  trialLicenses: data.trialLicenses === null ? 0 : data.trialLicenses,\r\n});\r\n\r\nexport const getCompanies = (): Company[] => {\r\n  let companyList: Company[] = [];\r\n  let companyId: number = 1;\r\n  let accountNumber: number = 30000;\r\n\r\n  for (let i = 0; i < 20; i++) {\r\n    let licenseNum = Math.random() * 10;\r\n    let mobileNum = Math.random() * 10;\r\n    let trialNum = Math.random() * 5;\r\n    let num = Math.round(Math.random() * 100);\r\n\r\n    companyList.push({\r\n      companyId: companyId,\r\n      companyName: `Test Company ${num}`,\r\n      accountNumber: accountNumber,\r\n      licenses: Math.round(licenseNum),\r\n      licensesMobileCount: Math.round(mobileNum),\r\n      trialLicenses: Math.round(trialNum),\r\n    });\r\n\r\n    companyId++;\r\n    accountNumber++;\r\n  }\r\n\r\n  return companyList;\r\n};\r\n\r\nexport const getCompaniesAsync = async (): Promise<Company[]> => {\r\n  let request = new Request(`${webApiUrl}/Company/companies`, {\r\n    method: \"get\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const response = await fetch(request);\r\n\r\n  if (response.ok) {\r\n    const body = await response.json();\r\n\r\n    return body.map(mapCompanyFromServer);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getCompany = (companyId: number): Company | undefined => {\r\n  const companyList = getCompanies();\r\n\r\n  let company = companyList.find((company) => company.companyId === companyId);\r\n\r\n  return company;\r\n};\r\n\r\nexport const getCompanyAsync = async (\r\n  accountNumber: number\r\n): Promise<Company> => {\r\n  const request = new Request(`${webApiUrl}/Company/${accountNumber}`, {\r\n    method: \"get\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const response = await fetch(request);\r\n\r\n  if (response.ok) {\r\n    const body = await response.json();\r\n\r\n    return mapCompanyFromServer(body);\r\n  } else {\r\n    return {\r\n      companyId: 0,\r\n      companyName: \"\",\r\n      accountNumber: 0,\r\n      licenses: 0,\r\n      licensesMobileCount: 0,\r\n      trialLicenses: 0,\r\n    };\r\n  }\r\n};\r\n\r\nexport const updateCompany = async (\r\n  updatedCompany: Company\r\n): Promise<boolean> => {\r\n  const request = new Request(\r\n    `${webApiUrl}/Company/${updatedCompany.companyId}`,\r\n    {\r\n      method: \"post\",\r\n      body: JSON.stringify(updatedCompany),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }\r\n  );\r\n\r\n  const response = await fetch(request);\r\n\r\n  if (response.ok) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getLicenseChanges = async (\r\n  companyId: number\r\n): Promise<LicenseChange[]> => {\r\n  const request = new Request(`${webApiUrl}/LicenseChange/${companyId}`, {\r\n    method: \"get\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const response = await fetch(request);\r\n\r\n  if (response.ok) {\r\n    const changes = await response.json();\r\n\r\n    return changes;\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Styles\\Styles.ts",[],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Page.tsx",[],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\DealerList.tsx",[],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\PageTitle.tsx",["54"],"/**@jsxImportSource @emotion/react */\r\nimport { css } from \"@emotion/react\";\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n  title: string;\r\n}\r\n\r\nconst PageTitle = ({ title }: Props) => {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <h1 className=\"h1\">{title}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageTitle;\r\n",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":8,"nodeType":"61","messageId":"62","endLine":1,"endColumn":12},{"ruleId":"59","severity":1,"message":"63","line":1,"column":10,"nodeType":"61","messageId":"62","endLine":1,"endColumn":24},{"ruleId":"59","severity":1,"message":"64","line":2,"column":10,"nodeType":"61","messageId":"62","endLine":2,"endColumn":13},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'NumericLiteral' is defined but never used.","'css' is defined but never used.","no-global-assign","no-unsafe-negation"]