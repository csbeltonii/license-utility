[{"C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\index.tsx":"1","C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\reportWebVitals.ts":"2","C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\App.tsx":"3","C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\components\\Dealer.tsx":"4","C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\components\\HomePage.tsx":"5","C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\components\\Styles\\Styles.ts":"6","C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\data\\companies.ts":"7","C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\components\\Page.tsx":"8","C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\components\\DealerList.tsx":"9","C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\components\\PageTitle.tsx":"10"},{"size":565,"mtime":1628256183426,"results":"11","hashOfConfig":"12"},{"size":440,"mtime":1628256183427,"results":"13","hashOfConfig":"12"},{"size":471,"mtime":1628256183421,"results":"14","hashOfConfig":"12"},{"size":3300,"mtime":1628259114792,"results":"15","hashOfConfig":"12"},{"size":2008,"mtime":1628262755463,"results":"16","hashOfConfig":"12"},{"size":1402,"mtime":1628256183424,"results":"17","hashOfConfig":"12"},{"size":4223,"mtime":1628256183425,"results":"18","hashOfConfig":"12"},{"size":432,"mtime":1628258188297,"results":"19","hashOfConfig":"12"},{"size":1285,"mtime":1628262241196,"results":"20","hashOfConfig":"12"},{"size":337,"mtime":1628261909835,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1quvn34",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\index.tsx",[],["46","47"],"C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\reportWebVitals.ts",[],"C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\App.tsx",["48"],"import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport HomePage from \"./components/HomePage\";\r\nimport Dealer from \"./components/Dealer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"\" element={<HomePage />} />\r\n        <Route path=\"/dealer/:accountNumber\" element={<Dealer />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\components\\Dealer.tsx",["49"],"C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\components\\HomePage.tsx",["50"],"C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\components\\Styles\\Styles.ts",[],"C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\data\\companies.ts",["51"],"import { NumericLiteral } from \"typescript\";\r\n\r\nconst webApiUrl = \"https://localhost:44375/api\";\r\n\r\nexport interface Company {\r\n  CompanyId: number;\r\n  CompanyName: string;\r\n  AccountNumber: number;\r\n  Licenses: number;\r\n  LicensesMobileCount: number;\r\n  TrialLicenses: number;\r\n}\r\n\r\ninterface CompanyFromServer {\r\n  accountNumber: number;\r\n  accountSid: string;\r\n  agentYear: string;\r\n  altContact: string;\r\n  billAddress1: string;\r\n  billAddress2: string;\r\n  billCity: string;\r\n  billState: string;\r\n  billZip: string;\r\n  companyId: number;\r\n  companyName: string;\r\n  companyType: string;\r\n  contact: string;\r\n  databaseVersion: string;\r\n  dealer: string;\r\n  dealerId: string;\r\n  dealerPass: string;\r\n  ein: string;\r\n  emailPort: number;\r\n  emailServer: string;\r\n  emailSsl: boolean;\r\n  endDate: Date;\r\n  fmfy: number;\r\n  fmity: number;\r\n  folderName: string;\r\n  invoiceUnit: boolean;\r\n  isActive: boolean;\r\n  legalName: string;\r\n  licenseKey: string;\r\n  licenseType: string;\r\n  licenses: number;\r\n  licensesMobileCount: number;\r\n  licensesUsed: number;\r\n  logoName: string;\r\n  parentId: number;\r\n  phone1: string;\r\n  phone2: string;\r\n  phone3: string;\r\n  phone4: string;\r\n  productVersion: string;\r\n  qbName: string;\r\n  qbOnline: boolean;\r\n  salesRep: string;\r\n  serverId: number;\r\n  shipAddress1: string;\r\n  shipAddress2: string;\r\n  shipCity: string;\r\n  shipState: string;\r\n  shipZip: string;\r\n  startDate: Date;\r\n  supportType: string;\r\n  terminalYN: boolean;\r\n  trialLicenses: number;\r\n  updateServerId: number;\r\n  versionSpec: string;\r\n  webServerId: number;\r\n  webServerIdNew: number;\r\n}\r\n\r\nconst mapCompanyFromServer = (data: CompanyFromServer): Company => ({\r\n  CompanyId: data.companyId,\r\n  CompanyName: data.companyName,\r\n  AccountNumber: data.accountNumber,\r\n  Licenses: data.licenses,\r\n  LicensesMobileCount: data.licensesMobileCount,\r\n  TrialLicenses: data.trialLicenses === null ? 0 : data.trialLicenses,\r\n});\r\n\r\nexport const getCompanies = (): Company[] => {\r\n  let companyList: Company[] = [];\r\n  let companyId: number = 1;\r\n  let accountNumber: number = 30000;\r\n\r\n  for (let i = 0; i < 20; i++) {\r\n    let licenseNum = Math.random() * 10;\r\n    let mobileNum = Math.random() * 10;\r\n    let trialNum = Math.random() * 5;\r\n    let num = Math.round(Math.random() * 100);\r\n\r\n    companyList.push({\r\n      CompanyId: companyId,\r\n      CompanyName: `Test Company ${num}`,\r\n      AccountNumber: accountNumber,\r\n      Licenses: Math.round(licenseNum),\r\n      LicensesMobileCount: Math.round(mobileNum),\r\n      TrialLicenses: Math.round(trialNum),\r\n    });\r\n\r\n    companyId++;\r\n    accountNumber++;\r\n  }\r\n\r\n  return companyList;\r\n};\r\n\r\nexport const getCompaniesAsync = async (): Promise<Company[]> => {\r\n  let request = new Request(`${webApiUrl}/Company/companies`, {\r\n    method: \"get\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const response = await fetch(request);\r\n\r\n  if (response.ok) {\r\n    const body = await response.json();\r\n\r\n    return body.map(mapCompanyFromServer);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getCompany = (companyId: number): Company | undefined => {\r\n  const companyList = getCompanies();\r\n\r\n  let company = companyList.find((company) => company.CompanyId === companyId);\r\n\r\n  return company;\r\n};\r\n\r\nexport const getCompanyAsync = async (\r\n  accountNumber: number\r\n): Promise<Company | undefined> => {\r\n  const request = new Request(`${webApiUrl}/Company/${accountNumber}`, {\r\n    method: \"get\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const response = await fetch(request);\r\n\r\n  if (response.ok) {\r\n    const body = await response.json();\r\n\r\n    return mapCompanyFromServer(body);\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const updateCompany = async (\r\n  updatedCompany: Company\r\n): Promise<boolean> => {\r\n  const request = new Request(\r\n    `${webApiUrl}/Company/${updatedCompany.CompanyId}`,\r\n    {\r\n      method: \"post\",\r\n      body: JSON.stringify(updatedCompany),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }\r\n  );\r\n\r\n  const response = await fetch(request);\r\n\r\n  if (response.ok) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n","C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\components\\Page.tsx",["52"],"/** @jsxImportSource @emotion/react */\r\nimport React from \"react\";\r\nimport { css } from \"@emotion/react\";\r\n\r\nimport PageTitle from \"./PageTitle\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Page = ({ children, title }: Props) => {\r\n  return (\r\n    <div className=\"container\" id=\"dealer-list\">\r\n      {<PageTitle title={title} />}\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\components\\DealerList.tsx",[],"C:\\Users\\Craig\\Source\\repos\\license-utility\\src\\components\\PageTitle.tsx",["53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":8,"nodeType":"60","messageId":"61","endLine":1,"endColumn":12},{"ruleId":"58","severity":1,"message":"62","line":2,"column":10,"nodeType":"60","messageId":"61","endLine":2,"endColumn":13},{"ruleId":"58","severity":1,"message":"63","line":15,"column":9,"nodeType":"60","messageId":"61","endLine":15,"endColumn":17},{"ruleId":"58","severity":1,"message":"64","line":1,"column":10,"nodeType":"60","messageId":"61","endLine":1,"endColumn":24},{"ruleId":"58","severity":1,"message":"62","line":3,"column":10,"nodeType":"60","messageId":"61","endLine":3,"endColumn":13},{"ruleId":"58","severity":1,"message":"62","line":2,"column":10,"nodeType":"60","messageId":"61","endLine":2,"endColumn":13},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","'navigate' is assigned a value but never used.","'NumericLiteral' is defined but never used.","no-global-assign","no-unsafe-negation"]