[{"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\index.tsx":"1","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\reportWebVitals.ts":"2","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\App.tsx":"3","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\SearchResults.tsx":"4","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\HomePage.tsx":"5","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Dealer.tsx":"6","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\data\\companies.ts":"7","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Styles\\Styles.ts":"8","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Page.tsx":"9","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\DealerList.tsx":"10","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\PageTitle.tsx":"11","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Test.tsx":"12"},{"size":565,"mtime":1628701055039,"results":"13","hashOfConfig":"14"},{"size":440,"mtime":1628701055039,"results":"15","hashOfConfig":"14"},{"size":591,"mtime":1628797935449,"results":"16","hashOfConfig":"14"},{"size":1243,"mtime":1628716902787,"results":"17","hashOfConfig":"14"},{"size":2078,"mtime":1628730139547,"results":"18","hashOfConfig":"14"},{"size":5154,"mtime":1628729750215,"results":"19","hashOfConfig":"14"},{"size":4953,"mtime":1628716786499,"results":"20","hashOfConfig":"14"},{"size":1402,"mtime":1628702883234,"results":"21","hashOfConfig":"14"},{"size":537,"mtime":1628730098010,"results":"22","hashOfConfig":"14"},{"size":1266,"mtime":1628730397669,"results":"23","hashOfConfig":"14"},{"size":330,"mtime":1628729764948,"results":"24","hashOfConfig":"14"},{"size":906,"mtime":1628795814155,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1xrpibx",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\index.tsx",[],["54","55"],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\reportWebVitals.ts",[],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\App.tsx",["56"],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\SearchResults.tsx",[],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\HomePage.tsx",[],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Dealer.tsx",["57","58","59","60","61","62","63","64"],"/**@jsxImportSource @emotion/react */\r\nimport { css } from \"@emotion/react\";\r\nimport React from \"react\";\r\nimport {\r\n  Company,\r\n  getCompanyAsync,\r\n  getLicenseChanges,\r\n  LicenseChange,\r\n  updateCompany,\r\n} from \"../data/companies\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Page from \"./Page\";\r\nimport { Form } from \"reactstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport {\r\n  FieldContainer,\r\n  FieldInput,\r\n  FieldLabel,\r\n  Fieldset,\r\n} from \"./Styles/Styles\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getuid, mainModule } from \"process\";\r\n\r\ntype FormData = {\r\n  companyId: number;\r\n  licenseCount: number;\r\n  mobileLicenseCount: number;\r\n  trialLicenseCount: number;\r\n};\r\n\r\nconst Dealer = () => {\r\n  const { accountNumber } = useParams();\r\n\r\n  const [company, setCompany] = React.useState<Company | undefined>(undefined);\r\n  const [licenseChanges, setLicenseChanges] = React.useState<LicenseChange[]>(\r\n    []\r\n  );\r\n\r\n  const { register, handleSubmit, formState } = useForm<FormData>({\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  let rowNumber: number = 1;\r\n\r\n  React.useEffect(() => {\r\n    const doGetCompany = async (accountNumber: number) => {\r\n      let company = await getCompanyAsync(accountNumber);\r\n      let changes = await getLicenseChanges(company.companyId);\r\n\r\n      setCompany(company);\r\n      setLicenseChanges(changes);\r\n    };\r\n\r\n    doGetCompany(Number(accountNumber));\r\n  }, [accountNumber]);\r\n\r\n  const submitForm = async (data: FormData) => {\r\n    await updateCompany({\r\n      companyId: data.companyId,\r\n      companyName: \"\",\r\n      accountNumber: 0,\r\n      licenses: data.licenseCount,\r\n      licensesMobileCount: data.mobileLicenseCount,\r\n      trialLicenses: data.trialLicenseCount,\r\n    });\r\n\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const renderBody = () => {\r\n    console.log(licenseChanges);\r\n\r\n    if (licenseChanges.length === 0)\r\n      return (\r\n        <tr>\r\n          <td className=\"text-center\" colSpan={5}>\r\n            There are no recorded license changes.\r\n          </td>\r\n        </tr>\r\n      );\r\n\r\n    return licenseChanges.map((change: LicenseChange) => {\r\n      return (\r\n        <tr key={rowNumber}>\r\n          <td>{new Date(change.changeDate).toLocaleDateString()}</td>\r\n          <td>{change.licenseBefore}</td>\r\n          <td>{change.licenseAfter}</td>\r\n          <td className=\"text-right\">\r\n            {change.changeType === \"D\"\r\n              ? \"Desktop\"\r\n              : change.changeType === \"M\"\r\n              ? \"Mobile\"\r\n              : \" Mobile Trial\"}\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Page title={`${company?.companyName}`}>\r\n      <div className=\"d-flex flex-column justify-content-around\">\r\n        <div className=\"m-3 p-3\">\r\n          <h5>Update Licenses</h5>\r\n          <form onSubmit={handleSubmit(submitForm)} className=\"w-25\">\r\n            <input\r\n              ref={register}\r\n              defaultValue={company?.companyId}\r\n              type=\"text\"\r\n              name=\"companyId\"\r\n              id=\"companyId\"\r\n              hidden\r\n              readOnly\r\n            />\r\n            <label className=\"form-label\">Desktop</label>\r\n            <div className=\"input-group mb-2\">\r\n              <input\r\n                type=\"number\"\r\n                min=\"0\"\r\n                ref={register}\r\n                defaultValue={company?.licenses}\r\n                id=\"licenseCount\"\r\n                name=\"licenseCount\"\r\n                className=\"form-control\"\r\n              />\r\n            </div>\r\n            <label className=\"form-label\">Mobile</label>\r\n            <div className=\"input-group mb-2\">\r\n              <input\r\n                ref={register}\r\n                defaultValue={company?.licensesMobileCount}\r\n                type=\"number\"\r\n                min=\"0\"\r\n                id=\"mobileLicenseCount\"\r\n                name=\"mobileLicenseCount\"\r\n                className=\"form-control\"\r\n              />\r\n            </div>\r\n            <label className=\"form-label\" htmlFor=\"trialLicenseCount\">\r\n              Trial\r\n            </label>\r\n            <div className=\"form-group mb-2\">\r\n              {\" \"}\r\n              <FieldInput\r\n                ref={register}\r\n                defaultValue={company?.trialLicenses}\r\n                type=\"number\"\r\n                min=\"0\"\r\n                id=\"trialLicenseCount\"\r\n                name=\"trialLicenseCount\"\r\n              />\r\n            </div>\r\n            <button className=\"btn btn-primary\" type=\"submit\" id=\"btn-submit\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n        <div className=\"m-3 p-3\">\r\n          <h5>History</h5>\r\n          <table className=\"table table-response table-hover table-striped\">\r\n            <thead>\r\n              <tr>\r\n                <th>Change Date</th>\r\n                <th>Previous</th>\r\n                <th>After</th>\r\n                <th>Change Type</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{renderBody()}</tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Dealer;\r\n","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\data\\companies.ts",["65"],"import { NumericLiteral } from \"typescript\";\r\n\r\nconst webApiUrl = \"https://localhost:44375/api\";\r\n\r\nexport interface Company {\r\n  companyId: number;\r\n  companyName: string;\r\n  accountNumber: number;\r\n  licenses: number;\r\n  licensesMobileCount: number;\r\n  trialLicenses: number;\r\n}\r\n\r\nexport interface LicenseChange {\r\n  companyId: number;\r\n  licenseBefore: number;\r\n  licenseAfter: number;\r\n  changeDate: Date;\r\n  changeType: string;\r\n}\r\n\r\ninterface CompanyFromServer {\r\n  accountNumber: number;\r\n  accountSid: string;\r\n  agentYear: string;\r\n  altContact: string;\r\n  billAddress1: string;\r\n  billAddress2: string;\r\n  billCity: string;\r\n  billState: string;\r\n  billZip: string;\r\n  companyId: number;\r\n  companyName: string;\r\n  companyType: string;\r\n  contact: string;\r\n  databaseVersion: string;\r\n  dealer: string;\r\n  dealerId: string;\r\n  dealerPass: string;\r\n  ein: string;\r\n  emailPort: number;\r\n  emailServer: string;\r\n  emailSsl: boolean;\r\n  endDate: Date;\r\n  fmfy: number;\r\n  fmity: number;\r\n  folderName: string;\r\n  invoiceUnit: boolean;\r\n  isActive: boolean;\r\n  legalName: string;\r\n  licenseKey: string;\r\n  licenseType: string;\r\n  licenses: number;\r\n  licensesMobileCount: number;\r\n  licensesUsed: number;\r\n  logoName: string;\r\n  parentId: number;\r\n  phone1: string;\r\n  phone2: string;\r\n  phone3: string;\r\n  phone4: string;\r\n  productVersion: string;\r\n  qbName: string;\r\n  qbOnline: boolean;\r\n  salesRep: string;\r\n  serverId: number;\r\n  shipAddress1: string;\r\n  shipAddress2: string;\r\n  shipCity: string;\r\n  shipState: string;\r\n  shipZip: string;\r\n  startDate: Date;\r\n  supportType: string;\r\n  terminalYN: boolean;\r\n  trialLicenses: number;\r\n  updateServerId: number;\r\n  versionSpec: string;\r\n  webServerId: number;\r\n  webServerIdNew: number;\r\n}\r\n\r\nconst mapCompanyFromServer = (data: CompanyFromServer): Company => ({\r\n  companyId: data.companyId,\r\n  companyName: data.companyName,\r\n  accountNumber: data.accountNumber,\r\n  licenses: data.licenses,\r\n  licensesMobileCount: data.licensesMobileCount,\r\n  trialLicenses: data.trialLicenses === null ? 0 : data.trialLicenses,\r\n});\r\n\r\nexport const getCompanies = (): Company[] => {\r\n  let companyList: Company[] = [];\r\n  let companyId: number = 1;\r\n  let accountNumber: number = 30000;\r\n\r\n  for (let i = 0; i < 20; i++) {\r\n    let licenseNum = Math.random() * 10;\r\n    let mobileNum = Math.random() * 10;\r\n    let trialNum = Math.random() * 5;\r\n    let num = Math.round(Math.random() * 100);\r\n\r\n    companyList.push({\r\n      companyId: companyId,\r\n      companyName: `Test Company ${num}`,\r\n      accountNumber: accountNumber,\r\n      licenses: Math.round(licenseNum),\r\n      licensesMobileCount: Math.round(mobileNum),\r\n      trialLicenses: Math.round(trialNum),\r\n    });\r\n\r\n    companyId++;\r\n    accountNumber++;\r\n  }\r\n\r\n  return companyList;\r\n};\r\n\r\nexport const getCompaniesAsync = async (): Promise<Company[]> => {\r\n  let request = new Request(`${webApiUrl}/Company/companies`, {\r\n    method: \"get\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const response = await fetch(request);\r\n\r\n  if (response.ok) {\r\n    const body = await response.json();\r\n\r\n    return body.map(mapCompanyFromServer);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getCompany = (companyId: number): Company | undefined => {\r\n  const companyList = getCompanies();\r\n\r\n  let company = companyList.find((company) => company.companyId === companyId);\r\n\r\n  return company;\r\n};\r\n\r\nexport const getCompanyAsync = async (\r\n  accountNumber: number\r\n): Promise<Company> => {\r\n  const request = new Request(`${webApiUrl}/Company/${accountNumber}`, {\r\n    method: \"get\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const response = await fetch(request);\r\n\r\n  if (response.ok) {\r\n    const body = await response.json();\r\n\r\n    return mapCompanyFromServer(body);\r\n  } else {\r\n    return {\r\n      companyId: 0,\r\n      companyName: \"\",\r\n      accountNumber: 0,\r\n      licenses: 0,\r\n      licensesMobileCount: 0,\r\n      trialLicenses: 0,\r\n    };\r\n  }\r\n};\r\n\r\nexport const updateCompany = async (\r\n  updatedCompany: Company\r\n): Promise<boolean> => {\r\n  const request = new Request(\r\n    `${webApiUrl}/Company/${updatedCompany.companyId}`,\r\n    {\r\n      method: \"post\",\r\n      body: JSON.stringify(updatedCompany),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }\r\n  );\r\n\r\n  const response = await fetch(request);\r\n\r\n  if (response.ok) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getLicenseChanges = async (\r\n  companyId: number\r\n): Promise<LicenseChange[]> => {\r\n  const request = new Request(`${webApiUrl}/LicenseChange/${companyId}`, {\r\n    method: \"get\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const response = await fetch(request);\r\n\r\n  if (response.ok) {\r\n    const changes = await response.json();\r\n\r\n    return changes;\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Styles\\Styles.ts",[],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Page.tsx",[],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\DealerList.tsx",[],"C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\PageTitle.tsx",["66"],"/**@jsxImportSource @emotion/react */\r\nimport { css } from \"@emotion/react\";\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n  title: string;\r\n}\r\n\r\nconst PageTitle = ({ title }: Props) => {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <h1 className=\"h1\">{title}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageTitle;\r\n","C:\\Users\\tehbl\\source\\repos\\license-utility\\src\\components\\Test.tsx",["67","68","69"],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":1,"column":8,"nodeType":"76","messageId":"77","endLine":1,"endColumn":12},{"ruleId":"74","severity":1,"message":"78","line":2,"column":10,"nodeType":"76","messageId":"77","endLine":2,"endColumn":13},{"ruleId":"74","severity":1,"message":"79","line":13,"column":10,"nodeType":"76","messageId":"77","endLine":13,"endColumn":14},{"ruleId":"74","severity":1,"message":"80","line":16,"column":3,"nodeType":"76","messageId":"77","endLine":16,"endColumn":17},{"ruleId":"74","severity":1,"message":"81","line":18,"column":3,"nodeType":"76","messageId":"77","endLine":18,"endColumn":13},{"ruleId":"74","severity":1,"message":"82","line":19,"column":3,"nodeType":"76","messageId":"77","endLine":19,"endColumn":11},{"ruleId":"74","severity":1,"message":"83","line":22,"column":10,"nodeType":"76","messageId":"77","endLine":22,"endColumn":16},{"ruleId":"74","severity":1,"message":"84","line":22,"column":18,"nodeType":"76","messageId":"77","endLine":22,"endColumn":28},{"ruleId":"74","severity":1,"message":"85","line":39,"column":35,"nodeType":"76","messageId":"77","endLine":39,"endColumn":44},{"ruleId":"74","severity":1,"message":"86","line":1,"column":10,"nodeType":"76","messageId":"77","endLine":1,"endColumn":24},{"ruleId":"74","severity":1,"message":"78","line":2,"column":10,"nodeType":"76","messageId":"77","endLine":2,"endColumn":13},{"ruleId":"74","severity":1,"message":"87","line":3,"column":10,"nodeType":"76","messageId":"77","endLine":3,"endColumn":18},{"ruleId":"74","severity":1,"message":"88","line":12,"column":9,"nodeType":"76","messageId":"77","endLine":12,"endColumn":13},{"ruleId":"74","severity":1,"message":"89","line":30,"column":9,"nodeType":"76","messageId":"77","endLine":30,"endColumn":16},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","'Form' is defined but never used.","'FieldContainer' is defined but never used.","'FieldLabel' is defined but never used.","'Fieldset' is defined but never used.","'getuid' is defined but never used.","'mainModule' is defined but never used.","'formState' is assigned a value but never used.","'NumericLiteral' is defined but never used.","'useTable' is defined but never used.","'data' is assigned a value but never used.","'columns' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]