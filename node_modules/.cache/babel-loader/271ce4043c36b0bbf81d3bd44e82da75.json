{"ast":null,"code":"const webApiUrl = \"\";\n\nconst mapCompanyFromServer = data => ({\n  CompanyId: data.companyId,\n  CompanyName: data.companyName,\n  AccountNumber: data.accountNumber,\n  Licenses: data.licenses,\n  LicensesMobileCount: data.licensesMobileCount,\n  TrialLicenses: data.trialLicenses\n});\n\nexport const getCompanies = () => {\n  let companyList = [];\n  let companyId = 1;\n  let accountNumber = 30000;\n\n  for (let i = 0; i < 20; i++) {\n    let licenseNum = Math.random() * 10;\n    let mobileNum = Math.random() * 10;\n    let trialNum = Math.random() * 5;\n    let num = Math.round(Math.random() * 100);\n    companyList.push({\n      CompanyId: companyId,\n      CompanyName: `Test Company ${num}`,\n      AccountNumber: accountNumber,\n      Licenses: Math.round(licenseNum),\n      LicensesMobileCount: Math.round(mobileNum),\n      TrialLicenses: Math.round(trialNum)\n    });\n    companyId++;\n    accountNumber++;\n  }\n\n  return companyList;\n};\nexport const getCompaniesAsync = async () => {\n  let request = new Request(`${webApiUrl}/companies`, {\n    method: \"get\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const response = await fetch(request);\n\n  if (response.ok) {\n    const body = await response.json();\n    return body.map();\n  } else {\n    return [];\n  }\n};\nexport const getCompany = companyId => {\n  const companyList = getCompanies();\n  let company = companyList.find(company => company.CompanyId === companyId);\n  return company;\n};","map":{"version":3,"sources":["C:/Users/tehbl/OneDrive/React stuff/license-utility/src/data/companies.ts"],"names":["webApiUrl","mapCompanyFromServer","data","CompanyId","companyId","CompanyName","companyName","AccountNumber","accountNumber","Licenses","licenses","LicensesMobileCount","licensesMobileCount","TrialLicenses","trialLicenses","getCompanies","companyList","i","licenseNum","Math","random","mobileNum","trialNum","num","round","push","getCompaniesAsync","request","Request","method","headers","response","fetch","ok","body","json","map","getCompany","company","find"],"mappings":"AAAA,MAAMA,SAAS,GAAG,EAAlB;;AAWA,MAAMC,oBAAoB,GAAIC,IAAD,KAA6B;AACxDC,EAAAA,SAAS,EAAED,IAAI,CAACE,SADwC;AAExDC,EAAAA,WAAW,EAAEH,IAAI,CAACI,WAFsC;AAGxDC,EAAAA,aAAa,EAAEL,IAAI,CAACM,aAHoC;AAIxDC,EAAAA,QAAQ,EAAEP,IAAI,CAACQ,QAJyC;AAKxDC,EAAAA,mBAAmB,EAAET,IAAI,CAACU,mBAL8B;AAMxDC,EAAAA,aAAa,EAAEX,IAAI,CAACY;AANoC,CAA7B,CAA7B;;AASA,OAAO,MAAMC,YAAY,GAAG,MAAiB;AAC3C,MAAIC,WAAsB,GAAG,EAA7B;AACA,MAAIZ,SAAiB,GAAG,CAAxB;AACA,MAAII,aAAqB,GAAG,KAA5B;;AAEA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,QAAIC,UAAU,GAAGC,IAAI,CAACC,MAAL,KAAgB,EAAjC;AACA,QAAIC,SAAS,GAAGF,IAAI,CAACC,MAAL,KAAgB,EAAhC;AACA,QAAIE,QAAQ,GAAGH,IAAI,CAACC,MAAL,KAAgB,CAA/B;AACA,QAAIG,GAAG,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACC,MAAL,KAAgB,GAA3B,CAAV;AAEAJ,IAAAA,WAAW,CAACS,IAAZ,CAAiB;AACftB,MAAAA,SAAS,EAAEC,SADI;AAEfC,MAAAA,WAAW,EAAG,gBAAekB,GAAI,EAFlB;AAGfhB,MAAAA,aAAa,EAAEC,aAHA;AAIfC,MAAAA,QAAQ,EAAEU,IAAI,CAACK,KAAL,CAAWN,UAAX,CAJK;AAKfP,MAAAA,mBAAmB,EAAEQ,IAAI,CAACK,KAAL,CAAWH,SAAX,CALN;AAMfR,MAAAA,aAAa,EAAEM,IAAI,CAACK,KAAL,CAAWF,QAAX;AANA,KAAjB;AASAlB,IAAAA,SAAS;AACTI,IAAAA,aAAa;AACd;;AAED,SAAOQ,WAAP;AACD,CAzBM;AA2BP,OAAO,MAAMU,iBAAiB,GAAG,YAAY;AAC3C,MAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAa,GAAE5B,SAAU,YAAzB,EAAsC;AAClD6B,IAAAA,MAAM,EAAE,KAD0C;AAElDC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAFyC,GAAtC,CAAd;AAOA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAD,CAA5B;;AAEA,MAAII,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AAEA,WAAOD,IAAI,CAACE,GAAL,EAAP;AACD,GAJD,MAIO;AACL,WAAO,EAAP;AACD;AACF,CAjBM;AAmBP,OAAO,MAAMC,UAAU,GAAIjC,SAAD,IAA4C;AACpE,QAAMY,WAAW,GAAGD,YAAY,EAAhC;AAEA,MAAIuB,OAAO,GAAGtB,WAAW,CAACuB,IAAZ,CAAkBD,OAAD,IAAaA,OAAO,CAACnC,SAAR,KAAsBC,SAApD,CAAd;AAEA,SAAOkC,OAAP;AACD,CANM","sourcesContent":["const webApiUrl = \"\";\r\n\r\nexport interface Company {\r\n  CompanyId: number;\r\n  CompanyName: string;\r\n  AccountNumber: number;\r\n  Licenses: number;\r\n  LicensesMobileCount: number;\r\n  TrialLicenses: number;\r\n}\r\n\r\nconst mapCompanyFromServer = (data: Company): Company => ({\r\n  CompanyId: data.companyId,\r\n  CompanyName: data.companyName,\r\n  AccountNumber: data.accountNumber,\r\n  Licenses: data.licenses,\r\n  LicensesMobileCount: data.licensesMobileCount,\r\n  TrialLicenses: data.trialLicenses,\r\n});\r\n\r\nexport const getCompanies = (): Company[] => {\r\n  let companyList: Company[] = [];\r\n  let companyId: number = 1;\r\n  let accountNumber: number = 30000;\r\n\r\n  for (let i = 0; i < 20; i++) {\r\n    let licenseNum = Math.random() * 10;\r\n    let mobileNum = Math.random() * 10;\r\n    let trialNum = Math.random() * 5;\r\n    let num = Math.round(Math.random() * 100);\r\n\r\n    companyList.push({\r\n      CompanyId: companyId,\r\n      CompanyName: `Test Company ${num}`,\r\n      AccountNumber: accountNumber,\r\n      Licenses: Math.round(licenseNum),\r\n      LicensesMobileCount: Math.round(mobileNum),\r\n      TrialLicenses: Math.round(trialNum),\r\n    });\r\n\r\n    companyId++;\r\n    accountNumber++;\r\n  }\r\n\r\n  return companyList;\r\n};\r\n\r\nexport const getCompaniesAsync = async () => {\r\n  let request = new Request(`${webApiUrl}/companies`, {\r\n    method: \"get\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const response = await fetch(request);\r\n\r\n  if (response.ok) {\r\n    const body = await response.json();\r\n\r\n    return body.map();\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getCompany = (companyId: number): Company | undefined => {\r\n  const companyList = getCompanies();\r\n\r\n  let company = companyList.find((company) => company.CompanyId === companyId);\r\n\r\n  return company;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}